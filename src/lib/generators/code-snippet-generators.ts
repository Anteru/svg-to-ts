import snakeCase from 'lodash.snakecase';
import camelCase from 'lodash.camelcase';
import kebapCase from 'lodash.kebabcase';
import { SvgDefinition } from '../converters/shared.converter';
import { FileConversionOptions, ConstantsConversionOptions } from '../options/conversion-options';

export enum Delimiter {
  CAMEL = 'CAMEL',
  KEBAB = 'KEBAB',
  SNAKE = 'SNAKE'
}

export const generateInterfaceDefinition = (conversionOptions: FileConversionOptions | ConstantsConversionOptions) => {
  const iconNameType =
    conversionOptions.generateType || conversionOptions.generateTypeObject ? conversionOptions.typeName : 'string';
  return `export interface ${conversionOptions.interfaceName}{
        name: ${conversionOptions.generateType ? iconNameType : 'string'};
        data: string;}`;
};

export const generateTypeDefinition = (
  conversionOptions: FileConversionOptions | ConstantsConversionOptions,
  svgDefinitions: SvgDefinition[]
): string => {
  let typesDefinition = `
    /* ⚠️ Do not edit this file - this file is generated by svg-to-ts*/
    
  `;

  if (conversionOptions.generateType) {
    typesDefinition += `
    export type ${conversionOptions.typeName} = ${svgDefinitions
      .map(({ typeName }, index) => `'${typeName}'${index === svgDefinitions.length - 1 ? '' : ' | '}`)
      .join('')};`;
  }

  if (conversionOptions.generateTypeObject) {
    typesDefinition += `
    export const ${conversionOptions.typeName} = {
      ${svgDefinitions
        .map(
          ({ typeName }, index) =>
            `${typeName}: '${typeName}'${conversionOptions.generateType ? ` as ${conversionOptions.typeName}` : ''}${
              index === svgDefinitions.length - 1 ? '' : ','
            }`
        )
        .join('')}
    };`;
  }

  return typesDefinition;
};

export const generateSvgConstant = (
  variableName: string,
  interfaceName: string,
  filenameWithoutEnding: string,
  data: string
): string => {
  return `export const ${variableName}: ${interfaceName} = {
                name: '${filenameWithoutEnding}',
                data: \`${data}\`
            };`;
};

export const generateSvgConstantWithImport = (
  variableName: string,
  filenameWithoutEnding: string,
  interfaceName: string,
  modelFileName: string,
  data: string
): string => {
  return `
    import {${interfaceName}} from './${modelFileName}';
  
    export const ${variableName}: ${interfaceName} = {
                name: '${filenameWithoutEnding}',
                data: \`${data}\`
            };`;
};

export const generateSvgStandaloneFile = (
  variableName: string,
  interfaceName: string,
  filenameWithoutEnding: string,
  data: string
): string => {
  return `export const ${variableName}: ${interfaceName} = {
                name: '${filenameWithoutEnding}',
                data: \`${data}\`
            };`;
};

export const generateExportStatement = (fileName: string, generateIconsFolderName: string) =>
  `export * from './${generateIconsFolderName}/${fileName}';`;

export const generateTypeName = (filenameWithoutEnding, delimiter: Delimiter): string => {
  if (delimiter === Delimiter.CAMEL) {
    return `${camelCase(filenameWithoutEnding)}`;
  }
  if (delimiter === Delimiter.KEBAB) {
    return `${kebapCase(filenameWithoutEnding)}`;
  }
  return `${snakeCase(filenameWithoutEnding)}`;
};

export const generateVariableName = (prefix: string, filenameWithoutEnding): string => {
  const camelCased = camelCase(filenameWithoutEnding);
  return prefix ? `${prefix}${capitalize(camelCased)}` : camelCased;
};

const capitalize = (value: string): string => {
  return value.charAt(0).toUpperCase() + value.slice(1);
};
